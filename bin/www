#!/usr/bin/env node

'use strict';

let app   = require('../server'),
    http  = require('http');

let port    = normalizePort(process.env.PORT || '3000'),
    server  = null;

//app.set('port', port);

//server = http.createServer(app);

app.listen(3000);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(3000);
// server.on('error', onError);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  let bind = '';

  if (error.syscall !== 'listen') {
    throw error;
  }

  bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

